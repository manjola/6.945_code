;;Problem 1

(modulo 13 8)
(remainder 13 8)
(modulo -13 8)
(remainder -13 8)
(modulo -13 -8)
(remainder -13 -8)

;;Difference between "remainder" and "modulo".

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define +mod
	(lamdba (a b n) (modulo (+ a b) n)))

(define -mod
	(lamdba (a b n) (modulo (- a b) n)))

(define *mod
	(lamdba (a b n) (modulo (* a b) n)))

(+mod 7 5 8)     ; -> 4
(+mod 10 10 3)   ; -> 2
(-mod 5 12 2)    ; -> 1
(*mod 6 6 9)     ; -> 0
(+mod 99 99 100) ; -> ?
(*mod 50 -3 100) ; -> ?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define modular
  (lambda (modulus op)
    (lambda (a1 a2)
      (modulo (op a1 a2) modulus))))

((modular 17 +) 13 11)   ; -> 7
((modular 17 -) 13 11)   ; -> 2
((modular 17 *) 13 11)   ; -> 7

;;Problem 2

(define (exptmod p)
  (let ((mod* (modular p *)))
    (define (square x)
      (mod* x x))
    (define (em base exponent)
      YOUR-CODE-HERE)
    em))


((exptmod 10) 2 0)   ; -> 1
((exptmod 10) 2 3)   ; -> 8
((exptmod 10) 3 4)   ; -> 1
((exptmod 100) 2 15) ; -> 68
((exptmod 100) -5 3) ; -> 75
