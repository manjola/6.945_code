;;; 6.945 Problem Set 1
;;; 
;;; Manushaqe Muco
;;; manjola@mit.edu

(load "regexp.scm")


;Problem 1.1
(define (r:* expr)
 ;0 or more copies
   (r:repeat 0 #f expr))

(define (r:+ expr)
 ;1 or more times
   (r:repeat 1 #f expr))


;Problem 1.2

;a) If we try to evaluate (r:repeat 0 1 expr), we'll be stuck in a loop. 
;   We'll need to evaluate (r:repeat 0 1 expr) to evaluate (r:repeat 0 1 expr)

;b) Advantages:
;   (1) Code is more clear and modular. r:? can be reused elsewhere. 
;   (2) The regular expression produced will be shorter. We don't want a regular expression so big 
;   that the shell cannot evaluate it, for big max or min values. 

;c) Ben's proposal advantages:
;   (1) Shorter expression. For Bonnie's case your epression gets longer each time you have to match a character more than 1 times. 
;   In Ben's case it's more concise in specifying how many times you need to match the given character and shorter too. 
;   (2) Uses built-in machinery for BREs (grep utility built-ins), so it will run faster.
;   (3) Because it is used in BRE, it will be available for both BRE and ERE systems. ? could be available only to EREs. 


(define (r:repeat min max expr)
  (apply r:seq
         (append (make-list min expr)
                 (if (eqv? max min)
                     '()
                     (if max
   			   (apply r:seq
            	 	(cons (car exprs) (list "\)\{" min "," max "\}"))
                               

                         (make-list (- max min)
                                    (r:alt expr ""))
	
                         (list expr "*"))))))



c\{3\}" is matched by characters seven to nine, the BRE "\(ab\)\{4,\}" is not matched at all, and the BRE "c\{1,3\}d" 

(define r:test-cases
  (append r:test-cases
	  '(((r:seq (r:bol) (r:repeat-n-times 3 (r:quote "cat")) (r:eol)) "catcatcat" #t)
	    ((r:seq (r:bol) (r:repeat-n-times 3 (r:quote "cat")) (r:eol)) "catcat" #f)
	    ((r:seq (r:bol) (r:repeat-n-times 3 (r:quote "cat")) (r:eol)) "catcatcatcat" #f))))

(r:run-tests r:test-cases r:grep eval-regexp)

















